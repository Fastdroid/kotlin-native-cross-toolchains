# Use old Ubuntu version to run this image on old Docker.
FROM ubuntu:20.04

# Replace apt mirros
RUN rm /etc/apt/sources.list && echo 'deb http://mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiverse' > /etc/apt/sources.list && \
    echo 'deb http://mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiverse' >> /etc/apt/sources.list && \
    echo 'deb http://mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse' >> /etc/apt/sources.list && \
    echo 'deb http://mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiverse' >> /etc/apt/sources.list
RUN apt update && DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends \
    gcc g++ git git-lfs wget curl ca-certificates patch unzip xz-utils bzip2 file cmake ninja-build make python3 python3-pip python3-setuptools \
    autoconf automake zlib1g-dev texinfo flex bison help2man gawk libtool libtool-bin libncurses-dev clang lld llvm patchelf

WORKDIR /root
ARG CROSS_ARCH=x86_64
ENV CROSS_PREFIX=${CROSS_ARCH}-linux-gnu BUILD_DEPS_ROOT=/root/build-deps-root
RUN wget http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.25.0.tar.xz -O crosstool-ng.tar.xz && \
    mkdir crosstool-ng && cd crosstool-ng && tar xvf ../crosstool-ng.tar.xz --strip 1 && ./configure --prefix=/usr && make install -j$(nproc) && \
    cd /root && rm -rf crosstool-ng*

ADD ${CROSS_PREFIX}-ct-ng.config /root
RUN mkdir ct-${CROSS_PREFIX}-build && cd ct-${CROSS_PREFIX}-build && cp ../${CROSS_PREFIX}-ct-ng.config .config && \
    ct-ng build.$(nproc) && cd .. && rm -rf ct-${CROSS_PREFIX}-build
RUN pip3 config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple && pip3 install cmake==3.23.3
# Install latest make to fix "make: write error: stdout"
RUN wget https://mirrors.ustc.edu.cn/gnu/make/make-4.3.tar.gz -O gnumake.tar.gz && mkdir gnumake && cd gnumake && tar xvf ../gnumake.tar.gz --strip 1 && \
    ./configure --prefix=/usr && make install -j$(nproc) && \
    cd /root && rm -rf gnumake

ENV TOOLCHAIN_ROOT=/root/x-tools/${CROSS_PREFIX}
ADD ct-clang-wrapper.sh ${TOOLCHAIN_ROOT}/bin/${CROSS_PREFIX}-clang
ADD ct-clang-wrapper.sh ${TOOLCHAIN_ROOT}/bin/${CROSS_PREFIX}-clang++
ENV PATH="${TOOLCHAIN_ROOT}/bin:${BUILD_DEPS_ROOT}/bin:${PATH}" \
    HOST_CC=${CROSS_PREFIX}-clang HOST_CXX="${CROSS_PREFIX}-clang++ -stdlib=libc++" \
    HOST_CPP=${CROSS_PREFIX}-cpp HOST_STRIP=${CROSS_PREFIX}-strip \
    HOST_CPPFLAGS="-I$BUILD_DEPS_ROOT/include" \
    HOST_CFLAGS="-I$BUILD_DEPS_ROOT/include" \
    HOST_CXXFLAGS="-I$BUILD_DEPS_ROOT/include" \
    # Escape $ORIGIN to use LDFLAGS in autoconf based project
    HOST_LDFLAGS="-pthread -L$BUILD_DEPS_ROOT/lib -stdlib=libc++ -Wl,-rpath,'\$\${ORIGIN}/../lib'" \
    HOST_RUNTIME_LIBS="$BUILD_DEPS_ROOT/lib/libc++.so.1" HOST_RPATH="\$ORIGIN/../lib"\
    HOST_CMAKE_FLAGS="-DCMAKE_FIND_ROOT_PATH=$BUILD_DEPS_ROOT -DCMAKE_INSTALL_RPATH='\$ORIGIN/../lib'" \
    LD_LIBRARY_PATH=$BUILD_DEPS_ROOT/lib

ADD build-dep-libs.sh /root
RUN pip3 install cmake==3.23.3 && ./build-dep-libs.sh && cp -r "${BUILD_DEPS_ROOT}/include/c++" "${TOOLCHAIN_ROOT}/${CROSS_PREFIX}/sysroot/usr/include/c++"
RUN DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends nodejs npm
ENV EMBED_PYTHON_CONFIGURE_ARGS="--enable-shared --enable-optimizations --with-openssl=$BUILD_DEPS_ROOT" \
    HOST_RUNTIME_LIBS="$HOST_RUNTIME_LIBS ${BUILD_DEPS_ROOT}/lib/libxml2.so.2.10.2"
