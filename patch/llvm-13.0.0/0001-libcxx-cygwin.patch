# Ref: https://cygwin.com/git-cygwin-packages/?p=git/cygwin-packages/libcxx.git;a=blob;f=9.0.1-cygwin-nodefaultlibs.patch;h=ef83f06f0ff44ec31ee095db27ac78beb9536618;hb=b4c4b523428ba4ce5f43ddc039055b0a480fabf6
diff --git a/libcxx/CMakeLists.txt b/libcxx/CMakeLists.txt
index b1e2535..77bf31c 100644
--- a/libcxx/CMakeLists.txt
+++ b/libcxx/CMakeLists.txt
@@ -803,6 +803,8 @@ function(cxx_link_system_libraries target)
 
   if (MINGW)
     target_link_libraries(${target} PRIVATE "${MINGW_LIBRARIES}")
+  elseif (CYGWIN)
+    target_link_libraries(${target} PRIVATE "${CYGWIN_LIBRARIES}")
   endif()
 
   if (LIBCXX_TARGETING_MSVC)
diff --git a/libcxx/cmake/config-ix.cmake b/libcxx/cmake/config-ix.cmake
index a2f1ff9..230d652 100644
--- a/libcxx/cmake/config-ix.cmake
+++ b/libcxx/cmake/config-ix.cmake
@@ -68,6 +68,17 @@ if (LIBCXX_SUPPORTS_NOSTDLIBXX_FLAG OR LIBCXX_SUPPORTS_NODEFAULTLIBS_FLAG)
                         shell32 user32 kernel32 mingw32 ${MINGW_RUNTIME}
                         moldname mingwex msvcrt)
     list(APPEND CMAKE_REQUIRED_LIBRARIES ${MINGW_LIBRARIES})
+  elseif (CYGWIN)
+	# Cygwin requires quite a few "C" runtime libraries in order for basic
+    # programs to link successfully with -nodefaultlibs.
+    if (LIBCXX_USE_COMPILER_RT)
+      set(CYGWIN_RUNTIME ${LIBCXX_BUILTINS_LIBRARY})
+    else ()
+      set(CYGWIN_RUNTIME gcc_s gcc)
+    endif()
+    set(CYGWIN_LIBRARIES ${CYGWIN_RUNTIME} cygwin advapi32
+                         shell32 user32 kernel32 ${CYGWIN_RUNTIME})
+    list(APPEND CMAKE_REQUIRED_LIBRARIES ${CYGWIN_LIBRARIES})
   endif()
   if (CMAKE_C_FLAGS MATCHES -fsanitize OR CMAKE_CXX_FLAGS MATCHES -fsanitize)
     set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -fno-sanitize=all")
diff --git a/libcxx/include/__config b/libcxx/include/__config
index 97e33f3..8bee76b 100644
--- a/libcxx/include/__config
+++ b/libcxx/include/__config
@@ -1293,7 +1293,7 @@ extern "C" _LIBCPP_FUNC_VIS void __sanitizer_annotate_contiguous_container(
 #   define _LIBCPP_THREAD_SAFETY_ANNOTATION(x)
 #endif
 
-#if __has_attribute(require_constant_initialization)
+#if !defined(__CYGWIN__) && !defined(__wasm__) && __has_attribute(require_constant_initialization)
 #  define _LIBCPP_SAFE_STATIC __attribute__((__require_constant_initialization__))
 #else
 #  define _LIBCPP_SAFE_STATIC
diff --git a/libcxxabi/src/CMakeLists.txt b/libcxxabi/src/CMakeLists.txt
index f07d433..44ac464 100644
--- a/libcxxabi/src/CMakeLists.txt
+++ b/libcxxabi/src/CMakeLists.txt
@@ -36,7 +36,7 @@ else()
   )
 endif()
 
-if (LIBCXXABI_ENABLE_THREADS AND (UNIX OR FUCHSIA) AND NOT (APPLE OR CYGWIN)
+if (LIBCXXABI_ENABLE_THREADS AND (UNIX OR FUCHSIA) AND NOT APPLE
     AND NOT (${CMAKE_SYSTEM_NAME} MATCHES "AIX"))
   list(APPEND LIBCXXABI_SOURCES
     cxa_thread_atexit.cpp
diff --git a/libcxxabi/src/cxa_thread_atexit.cpp b/libcxxabi/src/cxa_thread_atexit.cpp
index a940eaf..4b0d4d8 100644
--- a/libcxxabi/src/cxa_thread_atexit.cpp
+++ b/libcxxabi/src/cxa_thread_atexit.cpp
@@ -112,9 +112,12 @@ extern "C" {
 #ifdef HAVE___CXA_THREAD_ATEXIT_IMPL
     return __cxa_thread_atexit_impl(dtor, obj, dso_symbol);
 #else
+#if !(defined __CYGWIN__ || defined _WIN32)
     if (__cxa_thread_atexit_impl) {
       return __cxa_thread_atexit_impl(dtor, obj, dso_symbol);
-    } else {
+    } else
+#endif
+    {
       // Initialize the dtors std::__libcpp_tls_key (uses __cxa_guard_*() for
       // one-time initialization and __cxa_atexit() for destruction)
       static DtorsManager manager;
diff --git a/libcxxabi/include/__cxxabi_config.h b/libcxxabi/include/__cxxabi_config.h
index cffedb8..f25f864 100644
--- a/libcxxabi/include/__cxxabi_config.h
+++ b/libcxxabi/include/__cxxabi_config.h
@@ -66,7 +66,7 @@
  #endif
 #endif
 
-#if defined(_LIBCXXABI_COMPILER_MSVC)
+#if defined(_LIBCXXABI_COMPILER_MSVC) || defined(__CYGWIN__)
 #define _LIBCXXABI_WEAK
 #else
 #define _LIBCXXABI_WEAK __attribute__((__weak__))
